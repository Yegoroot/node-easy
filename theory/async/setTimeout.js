setTimeout(() => {
    console.log('Тяжелые вычисление ')
}, 0)
console.log('Некоторые ф-ии которые не хочется блокировать ')

/**
    Этот приём особенно полезен в ситуациях, когда, при выполнении тяжёлых вычислительных задач, 
    не хотелось бы блокировать главный поток, позволяя выполняться и другим функциям, 
    разбивая подобные задачи на несколько этапов, оформляемых в виде вызовов setTimeout().
 */

/** ASYNC setTimeout
 * --------------------------------------
 * незнаю нужен ли след кусок кода он с другого туториала, к предыдущему отношения не имеет
 */
function display(data, callback) {
    // с помощью случайного числа определяем ошибку
    var randInt = Math.random() * (10 - 1) + 1
    var err =
        randInt > 5 ? new Error('Ошибка выполнения. randInt больше 5') : null

    setTimeout(function() {
        callback(err, data)
    }, 0)
}

console.log('Начало работы программы')

display('Обработка данных...', function(err, data) {
    if (err) throw err
    console.log(data)
})

console.log('Завершение работы программы')
